# docker compose는 docker run 명령어 보관소.
# 실행 명령어는 docker compose up -d (백그라운드 실행)
# 삭제 명령어는 docker compose down
# 중지 명령어는 docker compose stop
services:
  webserver: #  컨테이너 이름(정확히는 서비스 이름)
    # coding-apple-docker-webserver-1 로 띄워짐. 앞에 폴더명이 붙고 뒤에 컨테이너 이름이 붙음
    image: nodeserver:1
    build: .
    develop:
      watch:
        - action: sync+restart # 내 컴퓨터에 있던 코드가 변경 사항이 있으면 컨테이너에 복붙+재시작
          path: . # 현재 폴더
          target: /app # 컨테이너의 /app 폴더
          ignore:
            - node_modules/
        # 라이브러리에 변동사항이 생기면 rebuild하는 것이 좋다.
        - action: rebuild
          path: package.json
    ports:
      - "8080:8080"
    depends_on:
      - db # db 컨테이너가 먼저 실행되어야 함.
#    같은 서비스의 컨테이너를 여러 개 띄울 수 있음. 근데 실행할 때 docker compose --compatibility up 명령어 사용해야함.
#    deploy:
#      mode: replicated
#      replicas: 3
    networks:
      - mynet1
      - mynet2

#  nginx:
#    image: webserver-nginx:1
#    ports:
#      - "80:80"
#    depends_on:
#      - webserver
#    networks:
#      - mynet1
#    restart: always

  db:
    image: postgres:17.2-alpine
#    env file이 여러 개일 경우 추가 가능.
#    env_file:
#      - foo.env
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER} # .env 파일에 있는 변수를 사용할 수 있음
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - mynet2
    volumes:
      - postgres_vol:/var/lib/postgresql/data

networks:
  mynet1:
  mynet2:

volumes:
  postgres_vol:
    external: true # 외부 볼륨을 사용할 때 사용. 외부 볼륨을 사용하면 컨테이너가 삭제되어도 데이터가 남아있음.
